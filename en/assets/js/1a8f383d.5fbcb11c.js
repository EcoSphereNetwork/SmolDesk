"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5591],{6851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"i18n/en/docusaurus-plugin-content-docs/current/architecture","title":"Architecture Overview","description":"","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/architecture.md","sourceDirName":"i18n/en/docusaurus-plugin-content-docs/current","slug":"/i18n/en/docusaurus-plugin-content-docs/current/architecture","permalink":"/SmolDesk/en/i18n/en/docusaurus-plugin-content-docs/current/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/SmolDesk/edit/main/docs/i18n/en/docusaurus-plugin-content-docs/current/architecture.md","tags":[],"version":"current","frontMatter":{"title":"Architecture Overview","description":""}}');var s=t(4848),c=t(8453);const i={title:"Architecture Overview",description:""},o="Architecture Overview",a={},d=[{value:"System Components",id:"system-components",level:2},{value:"Data Flow",id:"data-flow",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,s.jsx)(n.p,{children:"SmolDesk consists of a Rust backend built with Tauri and a React frontend written in TypeScript. A separate Node.js signaling server coordinates WebRTC peers."}),"\n",(0,s.jsx)(n.h2,{id:"system-components",children:"System Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend (React + Tauri)"})," \u2013 UI, state management and interaction with backend through Tauri IPC commands."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend (Rust)"})," \u2013 Screen capture, input forwarding, clipboard access and security utilities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Signaling Server"})," \u2013 WebSocket based server for exchanging WebRTC offer/answer and ICE candidates."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tests"})," \u2013 Vitest for TypeScript and ",(0,s.jsx)(n.code,{children:"cargo test"})," for Rust modules."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Frontend invokes Tauri commands for screen capture or input forwarding."}),"\n",(0,s.jsx)(n.li,{children:"Backend streams frames via WebRTC using the signaling server for connection establishment."}),"\n",(0,s.jsx)(n.li,{children:"Input events from the client are sent back through the same peer connection."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["IPC between the frontend and backend uses Tauri's ",(0,s.jsx)(n.code,{children:"invoke"})," API. Critical commands are defined in ",(0,s.jsx)(n.code,{children:"src-tauri/src/main.rs"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},c=r.createContext(s);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);