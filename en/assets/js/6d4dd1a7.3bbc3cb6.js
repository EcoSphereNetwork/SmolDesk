"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1308],{6904:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"docs/testing/playwright","title":"Playwright End-to-End Tests","description":"","source":"@site/docs/testing/playwright.md","sourceDirName":"docs/testing","slug":"/docs/testing/playwright","permalink":"/SmolDesk/en/docs/testing/playwright","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/SmolDesk/edit/main/docs/docs/testing/playwright.md","tags":[],"version":"current","frontMatter":{"title":"Playwright End-to-End Tests","description":""}}');var i=n(4848),r=n(8453);const o={title:"Playwright End-to-End Tests",description:""},l="Playwright End-to-End Tests",d={},c=[{value:"Mocking WebRTC and Window APIs",id:"mocking-webrtc-and-window-apis",level:2},{value:"Snapshot Tests",id:"snapshot-tests",level:2},{value:"Error Simulation",id:"error-simulation",level:2},{value:"Offline Mode",id:"offline-mode",level:2},{value:"Edge Cases",id:"edge-cases",level:2},{value:"Snapshot Stability Tips",id:"snapshot-stability-tips",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"playwright-end-to-end-tests",children:"Playwright End-to-End Tests"})}),"\n",(0,i.jsx)(s.p,{children:"Install dependencies:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,i.jsx)(s.p,{children:"Run tests:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npm run e2e\n"})}),"\n",(0,i.jsxs)(s.p,{children:["The dev server is started automatically by Playwright via ",(0,i.jsx)(s.code,{children:"webServer"})," in the\nconfig. Make sure ",(0,i.jsx)(s.code,{children:"npm run dev"})," works locally. When not running in CI the\nexisting server is reused to speed up tests."]}),"\n",(0,i.jsxs)(s.p,{children:["Configuration resides in ",(0,i.jsx)(s.code,{children:"playwright.config.ts"}),". Tests are stored in ",(0,i.jsx)(s.code,{children:"src/e2e/"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"mocking-webrtc-and-window-apis",children:"Mocking WebRTC and Window APIs"}),"\n",(0,i.jsxs)(s.p,{children:["When ",(0,i.jsx)(s.code,{children:"VITE_USE_MOCK=true"})," the tests run with simulated WebRTC streams and mocked window controls. The mocks live in ",(0,i.jsx)(s.code,{children:"src/ipc/__mocks__/"})," and are automatically loaded by ",(0,i.jsx)(s.code,{children:"src/ipc/index.ts"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"snapshot-tests",children:"Snapshot Tests"}),"\n",(0,i.jsxs)(s.p,{children:["Visual regressions are checked with ",(0,i.jsx)(s.code,{children:"toHaveScreenshot()"})," which stores images in\n",(0,i.jsx)(s.code,{children:"test-results/"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"error-simulation",children:"Error Simulation"}),"\n",(0,i.jsxs)(s.p,{children:["You can switch mocks to an error mode by setting ",(0,i.jsx)(s.code,{children:"VITE_USE_MOCK=error"}),". This\nloads ",(0,i.jsx)(s.code,{children:"src/ipc/__mocks__/connection.error.ts"})," and allows tests to verify that\nthe UI shows proper fallback messages when IPC calls fail."]}),"\n",(0,i.jsx)(s.h2,{id:"offline-mode",children:"Offline Mode"}),"\n",(0,i.jsxs)(s.p,{children:["Playwright's browser context can simulate offline conditions via\n",(0,i.jsx)(s.code,{children:"context.setOffline(true)"}),". Tests under ",(0,i.jsx)(s.code,{children:"offline.spec.ts"})," ensure the interface\ndisplays an offline indicator."]}),"\n",(0,i.jsx)(s.h2,{id:"edge-cases",children:"Edge Cases"}),"\n",(0,i.jsx)(s.p,{children:"Additional tests cover unusual states such as extremely long user names or\nempty API responses. These help harden the UI against unexpected input."}),"\n",(0,i.jsx)(s.h2,{id:"snapshot-stability-tips",children:"Snapshot Stability Tips"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Call ",(0,i.jsx)(s.code,{children:"page.waitForLoadState('networkidle')"})," before taking screenshots."]}),"\n",(0,i.jsxs)(s.li,{children:["Ensure target elements are visible using ",(0,i.jsx)(s.code,{children:"scrollIntoViewIfNeeded()"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["In CI the tests fall back to simple ",(0,i.jsx)(s.code,{children:"page.screenshot()"})," checks via\n",(0,i.jsx)(s.code,{children:"process.env.CI"})," because pixel output may vary."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"To run e2e tests in CI mode locally:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npm run test:ci:e2e\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Component-level snapshots will be added in ",(0,i.jsx)(s.strong,{children:"Phase 5"})," via Storybook and\nPlaywright component tests."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(6540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);