"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4828],{1473:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"docs/agents/README","title":"Agent Based Development","description":"","source":"@site/docs/agents/README.md","sourceDirName":"docs/agents","slug":"/docs/agents/","permalink":"/SmolDesk/en/docs/agents/","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/SmolDesk/edit/main/docs/docs/agents/README.md","tags":[],"version":"current","frontMatter":{"title":"Agent Based Development","description":""}}');var a=s(4848),o=s(8453);const r={title:"Agent Based Development",description:""},l="Agent Based Development",d={},c=[{value:"Available Agents",id:"available-agents",level:2}];function i(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"agent-based-development",children:"Agent Based Development"})}),"\n",(0,a.jsxs)(n.p,{children:["SmolDesk uses automated agents like ",(0,a.jsx)(n.strong,{children:"Codex"})," to maintain the project. Agents perform analysis, run tests and create pull requests."]}),"\n",(0,a.jsx)(n.h2,{id:"available-agents",children:"Available Agents"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Codex"})," \u2013 general repository automation and refactoring."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"OpenHands"})," \u2013 documentation parser and linter."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"TestRunner"})," \u2013 executes test suites and reports coverage."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Each agent has a dedicated entry in ",(0,a.jsx)(n.code,{children:".codex.json"})," with default commands.\nAgents collaborate by creating issues and pull requests for each development phase.\nAgents follow the workflow described in ",(0,a.jsx)(n.code,{children:"AGENTS.md"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/agent-types",children:"agent-types.md"})," for a list of agent categories and\n",(0,a.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/agent-life-cycle",children:"agent-life-cycle.md"})," for the workflow. The pull request\nprocess is detailed in ",(0,a.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/pull-request-agent",children:"pull-request-agent.md"})," with\nadditional rules in ",(0,a.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/merge-strategies",children:"merge-strategies.md"}),". For API usage\nsee ",(0,a.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/github-api-access",children:"github-api-access.md"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);