"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8393],{1552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"docs/development/plan","title":"Development Plan","description":"","source":"@site/docs/development/plan.md","sourceDirName":"docs/development","slug":"/docs/development/plan","permalink":"/SmolDesk/en/docs/development/plan","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/SmolDesk/edit/main/docs/docs/development/plan.md","tags":[],"version":"current","frontMatter":{"title":"Development Plan","description":""}}');var i=t(4848),l=t(8453);const o={title:"Development Plan",description:""},d="Development Plan",a={},r=[{value:"1. Initial Analysis",id:"1-initial-analysis",level:2},{value:"2. Module Validation",id:"2-module-validation",level:2},{value:"3. Component Completion",id:"3-component-completion",level:2},{value:"4. Test Strategy Implementation",id:"4-test-strategy-implementation",level:2},{value:"5. Automate CI/CD",id:"5-automate-cicd",level:2},{value:"6. Refactoring and Cleanup",id:"6-refactoring-and-cleanup",level:2},{value:"7. Feature Expansion",id:"7-feature-expansion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"development-plan",children:"Development Plan"})}),"\n",(0,i.jsx)(n.p,{children:"This iterative plan guides future Codex runs when enhancing SmolDesk."}),"\n",(0,i.jsx)(n.h2,{id:"1-initial-analysis",children:"1. Initial Analysis"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Build all components using ",(0,i.jsx)(n.code,{children:"make build"})," or the scripts under ",(0,i.jsx)(n.code,{children:"scripts/"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Run existing tests: ",(0,i.jsx)(n.code,{children:"npm test"})," and ",(0,i.jsx)(n.code,{children:"cargo test"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Review documentation in ",(0,i.jsx)(n.code,{children:"docs/"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-module-validation",children:"2. Module Validation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Inspect each package (",(0,i.jsx)(n.code,{children:"src/"}),", ",(0,i.jsx)(n.code,{children:"src-tauri/"}),", ",(0,i.jsx)(n.code,{children:"signaling-server/"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Ensure dependencies compile and lint cleanly."}),"\n",(0,i.jsx)(n.li,{children:"Document missing pieces or outdated code."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-component-completion",children:"3. Component Completion"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Finish incomplete React components and Rust modules."}),"\n",(0,i.jsx)(n.li,{children:"Verify IPC commands are implemented on both sides."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-test-strategy-implementation",children:"4. Test Strategy Implementation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Expand unit tests for critical paths."}),"\n",(0,i.jsx)(n.li,{children:"Add integration tests between backend and frontend."}),"\n",(0,i.jsx)(n.li,{children:"Provide basic end-to-end coverage using the signaling server."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-automate-cicd",children:"5. Automate CI/CD"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Configure GitHub Actions to build and test on push."}),"\n",(0,i.jsx)(n.li,{children:"Package artifacts for Linux in deb/rpm/AppImage formats."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6-refactoring-and-cleanup",children:"6. Refactoring and Cleanup"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove dead code and unused assets."}),"\n",(0,i.jsx)(n.li,{children:"Apply formatting and lint rules."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"7-feature-expansion",children:"7. Feature Expansion"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement roadmap items such as multi-monitor support and advanced security."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each phase should end with a successful build and passing tests before moving on."}),"\n",(0,i.jsxs)(n.p,{children:["For details on the completed component validation work, see the ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/development/phase-2-report",children:"Phase 2 Report"}),".\nThe CI integration progress is documented in the ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/development/phase-3-report",children:"Phase 3 Report"}),".\nPreparation for the next stage is outlined in the ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/testing/phase-4-overview",children:"Phase 4 Overview"}),".\nResults are summarized in the ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/development/phase-4-report",children:"Phase 4 Report"}),".\nThe next step is defined in the ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/development/phase-5-overview",children:"Phase 5 Overview"}),".\nSee the ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/testing/playwright",children:"Playwright guide"})," for running E2E tests.\n\\nSee ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/agent-life-cycle",children:"agent phases"})," for the automated workflow.\nAutonomous PR merges are described in ",(0,i.jsx)(n.a,{href:"/SmolDesk/en/docs/agents/pull-request-agent",children:"../agents/pull-request-agent.md"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var s=t(6540);const i={},l=s.createContext(i);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);